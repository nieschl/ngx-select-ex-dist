{"version":3,"file":"ngx-select-ex.umd.js.map","sources":["ng://ngx-select-ex/ngx-select/ngx-select.classes.ts","ng://ngx-select-ex/ngx-select/ngx-templates.directive.ts","ng://ngx-select-ex/ngx-select/ngx-select.component.ts","ng://ngx-select-ex/ngx-select/ngx-select.module.ts"],"sourcesContent":["import {DomSanitizer, SafeHtml} from '@angular/platform-browser';\r\nimport * as escapeStringNs from 'escape-string-regexp';\r\nimport {INgxSelectOptGroup, INgxSelectOption, INgxSelectOptionBase, TNgxSelectOptionType} from './ngx-select.interfaces';\r\n\r\nconst escapeString = escapeStringNs;\r\n\r\nexport class NgxSelectOption implements INgxSelectOption, INgxSelectOptionBase {\r\n    readonly type: TNgxSelectOptionType = 'option';\r\n\r\n    constructor(public value: number | string,\r\n                public text: string,\r\n                public disabled: boolean,\r\n                public data: any,\r\n                private _parent: NgxSelectOptGroup = null) {\r\n    }\r\n\r\n    public get parent(): NgxSelectOptGroup {\r\n        return this._parent;\r\n    }\r\n\r\n    private cacheHighlightText: string;\r\n    private cacheRenderedText: SafeHtml = null;\r\n\r\n    public renderText(sanitizer: DomSanitizer, highlightText: string): SafeHtml {\r\n        if (this.cacheHighlightText !== highlightText || this.cacheRenderedText === null) {\r\n            this.cacheHighlightText = highlightText;\r\n            if (this.cacheHighlightText) {\r\n                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml((this.text + '').replace(\r\n                    new RegExp(escapeString(this.cacheHighlightText), 'gi'), '<strong>$&</strong>'\r\n                ));\r\n            } else {\r\n                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml(this.text);\r\n            }\r\n        }\r\n        return this.cacheRenderedText;\r\n    }\r\n}\r\n\r\nexport class NgxSelectOptGroup implements INgxSelectOptGroup, INgxSelectOptionBase {\r\n    readonly type: TNgxSelectOptionType = 'optgroup';\r\n\r\n    public optionsFiltered: NgxSelectOption[];\r\n\r\n    constructor(public label: string,\r\n                public options: NgxSelectOption[] = []) {\r\n        this.filter(() => true);\r\n    }\r\n\r\n    public filter(callbackFn: (value: NgxSelectOption) => any): void {\r\n        this.optionsFiltered = this.options.filter((option: NgxSelectOption) => callbackFn(option));\r\n    }\r\n}\r\n\r\nexport type TSelectOption = NgxSelectOptGroup | NgxSelectOption;\r\n","import {Directive, TemplateRef} from '@angular/core';\r\n\r\n@Directive({selector: '[ngx-select-option]'})\r\nexport class NgxSelectOptionDirective {\r\n    constructor(public template: TemplateRef<any>) {\r\n    }\r\n}\r\n\r\n@Directive({selector: '[ngx-select-option-selected]'})\r\nexport class NgxSelectOptionSelectedDirective {\r\n    constructor(public template: TemplateRef<any>) {\r\n    }\r\n}\r\n\r\n@Directive({selector: '[ngx-select-option-not-found]'})\r\nexport class NgxSelectOptionNotFoundDirective {\r\n    constructor(public template: TemplateRef<any>) {\r\n    }\r\n}\r\n","import {\r\n    AfterContentChecked, DoCheck, Input, Output, ViewChild,\r\n    Component, ElementRef, EventEmitter, forwardRef, HostListener, IterableDiffer, IterableDiffers, ChangeDetectorRef, ContentChild,\r\n    TemplateRef, Optional, Inject, InjectionToken\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\r\nimport {Subject, Observable, BehaviorSubject, of, empty, from} from 'rxjs';\r\nimport {map, merge, combineLatest, distinctUntilChanged, share, tap, flatMap, filter, toArray} from 'rxjs/operators';\r\n\r\nimport * as lodashNs from 'lodash';\r\nimport * as escapeStringNs from 'escape-string-regexp';\r\nimport {NgxSelectOptGroup, NgxSelectOption, TSelectOption} from './ngx-select.classes';\r\nimport {NgxSelectOptionDirective, NgxSelectOptionNotFoundDirective, NgxSelectOptionSelectedDirective} from './ngx-templates.directive';\r\nimport {INgxOptionNavigated, INgxSelectOption, INgxSelectOptions} from './ngx-select.interfaces';\r\n\r\nconst _ = lodashNs;\r\nconst escapeString = escapeStringNs;\r\n\r\nexport const NGX_SELECT_OPTIONS = new InjectionToken<any>('NGX_SELECT_OPTIONS');\r\n\r\nexport interface INgxSelectComponentMouseEvent extends MouseEvent {\r\n    clickedSelectComponent?: NgxSelectComponent;\r\n}\r\n\r\nenum ENavigation {\r\n    first, previous, next, last,\r\n    firstSelected, firstIfOptionActiveInvisible\r\n}\r\n\r\nfunction propertyExists(obj: Object, propertyName: string) {\r\n    return propertyName in obj;\r\n}\r\n\r\n@Component({\r\n    selector: 'ngx-select',\r\n    templateUrl: './ngx-select.component.html',\r\n    styleUrls: ['./ngx-select.component.scss'],\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => NgxSelectComponent),\r\n            multi: true\r\n        }\r\n    ]\r\n})\r\nexport class NgxSelectComponent implements INgxSelectOptions, ControlValueAccessor, DoCheck, AfterContentChecked {\r\n    @Input() public items: any[];\r\n    @Input() public optionValueField = 'id';\r\n    @Input() public optionTextField = 'text';\r\n    @Input() public optGroupLabelField = 'label';\r\n    @Input() public optGroupOptionsField = 'options';\r\n    @Input() public multiple = false;\r\n    @Input() public allowClear = false;\r\n    @Input() public placeholder = '';\r\n    @Input() public noAutoComplete = false;\r\n    @Input() public disabled = false;\r\n    @Input() public defaultValue: any[] = [];\r\n    @Input() public autoSelectSingleOption = false;\r\n    @Input() public autoClearSearch = false;\r\n    @Input() public noResultsFound = 'No results found';\r\n    @Input() public size: 'small' | 'default' | 'large' = 'default';\r\n    @Input() public searchCallback: (search: string, item: INgxSelectOption) => boolean;\r\n    public keyCodeToRemoveSelected = 'Delete';\r\n    public keyCodeToOptionsOpen = 'Enter';\r\n    public keyCodeToOptionsClose = 'Escape';\r\n    public keyCodeToOptionsSelect = 'Enter';\r\n    public keyCodeToNavigateFirst = 'ArrowLeft';\r\n    public keyCodeToNavigatePrevious = 'ArrowUp';\r\n    public keyCodeToNavigateNext = 'ArrowDown';\r\n    public keyCodeToNavigateLast = 'ArrowRight';\r\n\r\n    @Output() public typed = new EventEmitter<string>();\r\n    @Output() public focus = new EventEmitter<void>();\r\n    @Output() public blur = new EventEmitter<void>();\r\n    @Output() public open = new EventEmitter<void>();\r\n    @Output() public close = new EventEmitter<void>();\r\n    @Output() public select = new EventEmitter<any>();\r\n    @Output() public remove = new EventEmitter<any>();\r\n    @Output() public navigated = new EventEmitter<INgxOptionNavigated>();\r\n    @Output() public selectionChanges = new EventEmitter<INgxSelectOption[]>();\r\n\r\n    @ViewChild('main') protected mainElRef: ElementRef;\r\n    @ViewChild('input') protected inputElRef: ElementRef;\r\n    @ViewChild('choiceMenu') protected choiceMenuElRef: ElementRef;\r\n\r\n    @ContentChild(NgxSelectOptionDirective, {read: TemplateRef}) templateOption: NgxSelectOptionDirective;\r\n    @ContentChild(NgxSelectOptionSelectedDirective, {read: TemplateRef}) templateSelectedOption: NgxSelectOptionSelectedDirective;\r\n    @ContentChild(NgxSelectOptionNotFoundDirective, {read: TemplateRef}) templateOptionNotFound: NgxSelectOptionNotFoundDirective;\r\n\r\n    public optionsOpened = false;\r\n    public optionsFiltered: TSelectOption[];\r\n\r\n    private optionActive: NgxSelectOption;\r\n    private itemsDiffer: IterableDiffer<any>;\r\n    private defaultValueDiffer: IterableDiffer<any[]>;\r\n    private actualValue: any[] = [];\r\n\r\n    public subjOptions = new BehaviorSubject<TSelectOption[]>([]);\r\n    private subjSearchText = new BehaviorSubject<string>('');\r\n\r\n    private subjOptionsSelected = new BehaviorSubject<NgxSelectOption[]>([]);\r\n    private subjExternalValue = new BehaviorSubject<any[]>([]);\r\n    private subjDefaultValue = new BehaviorSubject<any[]>([]);\r\n    private subjRegisterOnChange = new Subject();\r\n\r\n    private cacheOptionsFilteredFlat: NgxSelectOption[];\r\n    private cacheElementOffsetTop: number;\r\n\r\n    private _focusToInput = false;\r\n    public isFocused = false;\r\n\r\n    constructor(iterableDiffers: IterableDiffers, private sanitizer: DomSanitizer, private cd: ChangeDetectorRef,\r\n                @Inject(NGX_SELECT_OPTIONS) @Optional() defaultOptions: INgxSelectOptions) {\r\n        Object.assign(this, defaultOptions);\r\n\r\n        // differs\r\n        this.itemsDiffer = iterableDiffers.find([]).create<any>(null);\r\n        this.defaultValueDiffer = iterableDiffers.find([]).create<any>(null);\r\n\r\n        // observers\r\n        this.typed.subscribe((text: string) => this.subjSearchText.next(text));\r\n        this.subjOptionsSelected.subscribe((options: NgxSelectOption[]) => this.selectionChanges.emit(options));\r\n        let cacheExternalValue: any[];\r\n        const subjActualValue = this.subjExternalValue\r\n            .pipe(\r\n                map((v: any[]) => cacheExternalValue = v === null ? [] : [].concat(v)),\r\n                merge(\r\n                    this.subjOptionsSelected\r\n                    .pipe(\r\n                        map((options: NgxSelectOption[]) =>\r\n                            options.map((o: NgxSelectOption) => o.value)\r\n                        )\r\n                    )\r\n                ),\r\n                combineLatest(this.subjDefaultValue, (eVal: any[], dVal: any[]) => {\r\n                const newVal = _.isEqual(eVal, dVal) ? [] : eVal;\r\n                return newVal.length ? newVal : dVal;\r\n                }),\r\n                distinctUntilChanged((x, y) => _.isEqual(x, y)),\r\n                share()\r\n            );\r\n\r\n        subjActualValue\r\n            .pipe(\r\n                combineLatest(this.subjRegisterOnChange, (actualValue: any[]) => actualValue)\r\n            )\r\n            .subscribe((actualValue: any[]) => {\r\n                this.actualValue = actualValue;\r\n                if (!_.isEqual(actualValue, cacheExternalValue)) {\r\n                    cacheExternalValue = actualValue;\r\n                    if (this.multiple) {\r\n                        this.onChange(actualValue);\r\n                    } else {\r\n                        this.onChange(actualValue.length ? actualValue[0] : null);\r\n                    }\r\n                }\r\n            });\r\n\r\n        this.subjOptions\r\n            .pipe(\r\n                flatMap((options: TSelectOption[]) => from(options)\r\n                .pipe(flatMap((option: TSelectOption) => option instanceof NgxSelectOption\r\n                    ? of(option)\r\n                    : (option instanceof NgxSelectOptGroup ? from(option.options) : empty())\r\n                ),\r\n                toArray()\r\n                )\r\n            ))\r\n            .pipe(\r\n                combineLatest(subjActualValue, (optionsFlat: NgxSelectOption[], actualValue: any[]) => {\r\n                    from(optionsFlat)\r\n                    .pipe(\r\n                            filter((option: NgxSelectOption) => actualValue.indexOf(option.value) !== -1),\r\n                            toArray(),\r\n                            filter((options: NgxSelectOption[]) => !_.isEqual(options, this.subjOptionsSelected.value))\r\n                    )\r\n                        .subscribe((options: NgxSelectOption[]) => this.subjOptionsSelected.next(options));\r\n                })\r\n            )\r\n            .subscribe();\r\n\r\n        this.subjOptions\r\n            .pipe(\r\n                combineLatest(this.subjOptionsSelected, this.subjSearchText,\r\n                    (options: TSelectOption[], selectedOptions: NgxSelectOption[], search: string) => {\r\n                        this.optionsFiltered = this.filterOptions(search, options, selectedOptions);\r\n                        this.cacheOptionsFilteredFlat = null;\r\n                        this.navigateOption(ENavigation.firstIfOptionActiveInvisible);\r\n                        return selectedOptions;\r\n                    }\r\n                ),\r\n                flatMap((selectedOptions: NgxSelectOption[]) => {\r\n                    return this.optionsFilteredFlat().pipe(filter((flatOptions: NgxSelectOption[]) =>\r\n                        this.autoSelectSingleOption && flatOptions.length === 1 && !selectedOptions.length));\r\n                })\r\n                )\r\n            .subscribe((flatOptions: NgxSelectOption[]) => this.subjOptionsSelected.next(flatOptions));\r\n    }\r\n\r\n    public setFormControlSize(otherClassNames: Object = {}, useFormControl: boolean = true) {\r\n        const formControlExtraClasses = useFormControl ? {\r\n            'form-control-sm input-sm': this.size === 'small',\r\n            'form-control-lg input-lg': this.size === 'large'\r\n        } : {};\r\n        return Object.assign(formControlExtraClasses, otherClassNames);\r\n    }\r\n\r\n    public setBtnSize() {\r\n        return {'btn-sm': this.size === 'small', 'btn-lg': this.size === 'large'};\r\n    }\r\n\r\n    public get optionsSelected(): NgxSelectOption[] {\r\n        return this.subjOptionsSelected.value;\r\n    }\r\n\r\n    public mainClicked(event: INgxSelectComponentMouseEvent) {\r\n        event.clickedSelectComponent = this;\r\n        if (!this.isFocused) {\r\n            this.isFocused = true;\r\n            this.focus.emit();\r\n        }\r\n    }\r\n\r\n    @HostListener('document:focusin', ['$event'])\r\n    @HostListener('document:click', ['$event'])\r\n    public documentClick(event: INgxSelectComponentMouseEvent) {\r\n        if (event.clickedSelectComponent !== this) {\r\n            if (this.optionsOpened) {\r\n                this.optionsClose();\r\n                this.cd.detectChanges(); // fix error because of delay between different events\r\n            }\r\n            if (this.isFocused) {\r\n                this.isFocused = false;\r\n                this.blur.emit();\r\n            }\r\n        }\r\n    }\r\n\r\n    private optionsFilteredFlat(): Observable<NgxSelectOption[]> {\r\n        if (this.cacheOptionsFilteredFlat) {\r\n            return of(this.cacheOptionsFilteredFlat);\r\n        }\r\n\r\n        return from(this.optionsFiltered)\r\n            .pipe(flatMap<TSelectOption, NgxSelectOption>((option: TSelectOption) =>\r\n                option instanceof NgxSelectOption ? of(option) :\r\n                    (option instanceof NgxSelectOptGroup ? from(option.optionsFiltered) : empty())\r\n                ),\r\n                filter((optionsFilteredFlat: NgxSelectOption) => !optionsFilteredFlat.disabled),\r\n                toArray(),\r\n                tap((optionsFilteredFlat: NgxSelectOption[]) => this.cacheOptionsFilteredFlat = optionsFilteredFlat)\r\n            );\r\n    }\r\n\r\n    private navigateOption(navigation: ENavigation) {\r\n        this.optionsFilteredFlat()\r\n            .pipe(map<NgxSelectOption[], INgxOptionNavigated>((options: NgxSelectOption[]) => {\r\n                const navigated: INgxOptionNavigated = {index: -1, activeOption: null, filteredOptionList: options};\r\n                let newActiveIdx;\r\n                switch (navigation) {\r\n                    case ENavigation.first:\r\n                        navigated.index = 0;\r\n                        break;\r\n                    case ENavigation.previous:\r\n                        newActiveIdx = options.indexOf(this.optionActive) - 1;\r\n                        navigated.index = newActiveIdx >= 0 ? newActiveIdx : options.length - 1;\r\n                        break;\r\n                    case ENavigation.next:\r\n                        newActiveIdx = options.indexOf(this.optionActive) + 1;\r\n                        navigated.index = newActiveIdx < options.length ? newActiveIdx : 0;\r\n                        break;\r\n                    case ENavigation.last:\r\n                        navigated.index = options.length - 1;\r\n                        break;\r\n                    case ENavigation.firstSelected:\r\n                        if (this.subjOptionsSelected.value.length) {\r\n                            navigated.index = options.indexOf(this.subjOptionsSelected.value[0]);\r\n                        }\r\n                        break;\r\n                    case ENavigation.firstIfOptionActiveInvisible:\r\n                        const idxOfOptionActive = options.indexOf(this.optionActive);\r\n                        navigated.index = idxOfOptionActive > 0 ? idxOfOptionActive : 0;\r\n                        break;\r\n                }\r\n                navigated.activeOption = options[navigated.index];\r\n                return navigated;\r\n            }))\r\n            .subscribe((newNavigated: INgxOptionNavigated) => this.optionActivate(newNavigated));\r\n    }\r\n\r\n    public ngDoCheck(): void {\r\n        if (this.itemsDiffer.diff(this.items)) {\r\n            this.subjOptions.next(this.buildOptions(this.items));\r\n        }\r\n\r\n        const defVal = this.defaultValue ? [].concat(this.defaultValue) : [];\r\n        if (this.defaultValueDiffer.diff(defVal)) {\r\n            this.subjDefaultValue.next(defVal);\r\n        }\r\n    }\r\n\r\n    public ngAfterContentChecked(): void {\r\n        if (this._focusToInput && this.checkInputVisibility() && this.inputElRef &&\r\n            this.inputElRef.nativeElement !== document.activeElement) {\r\n            this._focusToInput = false;\r\n            this.inputElRef.nativeElement.focus();\r\n        }\r\n    }\r\n\r\n    public canClearNotMultiple(): boolean {\r\n        return this.allowClear && !!this.subjOptionsSelected.value.length &&\r\n            (!this.subjDefaultValue.value.length || this.subjDefaultValue.value[0] !== this.actualValue[0]);\r\n    }\r\n\r\n    public focusToInput(): void {\r\n        this._focusToInput = true;\r\n    }\r\n\r\n    public inputKeyDown(event: KeyboardEvent) {\r\n        const keysForOpenedState = [\r\n            this.keyCodeToOptionsSelect,\r\n            this.keyCodeToNavigateFirst,\r\n            this.keyCodeToNavigatePrevious,\r\n            this.keyCodeToNavigateNext,\r\n            this.keyCodeToNavigateLast,\r\n        ];\r\n        const keysForClosedState = [this.keyCodeToOptionsOpen, this.keyCodeToRemoveSelected];\r\n\r\n        if (this.optionsOpened && keysForOpenedState.indexOf(event.code) !== -1) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            switch (event.code) {\r\n                case this.keyCodeToOptionsSelect:\r\n                    this.optionSelect(this.optionActive);\r\n                    this.navigateOption(ENavigation.next);\r\n                    break;\r\n                case this.keyCodeToNavigateFirst:\r\n                    this.navigateOption(ENavigation.first);\r\n                    break;\r\n                case this.keyCodeToNavigatePrevious:\r\n                    this.navigateOption(ENavigation.previous);\r\n                    break;\r\n                case this.keyCodeToNavigateLast:\r\n                    this.navigateOption(ENavigation.last);\r\n                    break;\r\n                case this.keyCodeToNavigateNext:\r\n                    this.navigateOption(ENavigation.next);\r\n                    break;\r\n            }\r\n        } else if (!this.optionsOpened && keysForClosedState.indexOf(event.code) !== -1) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            switch (event.code) {\r\n                case this.keyCodeToOptionsOpen:\r\n                    this.optionsOpen();\r\n                    break;\r\n                case this.keyCodeToRemoveSelected:\r\n                    this.optionRemove(this.subjOptionsSelected.value[this.subjOptionsSelected.value.length - 1], event);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public mainKeyUp(event: KeyboardEvent): void {\r\n        if (event.code === this.keyCodeToOptionsClose) {\r\n            this.optionsClose(/*true*/);\r\n        }\r\n    }\r\n\r\n    public trackByOption(index: number, option: TSelectOption) {\r\n        return option instanceof NgxSelectOption ? option.value :\r\n            (option instanceof NgxSelectOptGroup ? option.label : option);\r\n    }\r\n\r\n    public checkInputVisibility(): boolean {\r\n        return (this.multiple === true) || (this.optionsOpened && !this.noAutoComplete);\r\n    }\r\n\r\n    /** @internal */\r\n    public inputKeyUp(value: string = '') {\r\n        if (!this.optionsOpened && value) {\r\n            this.optionsOpen(value);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public doInputText(value: string) {\r\n        if (this.optionsOpened) {\r\n            this.typed.emit(value);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public inputClick(value: string = '') {\r\n        if (!this.optionsOpened) {\r\n            this.optionsOpen(value);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public sanitize(html: string): SafeHtml {\r\n        return html ? this.sanitizer.bypassSecurityTrustHtml(html) : null;\r\n    }\r\n\r\n    /** @internal */\r\n    public highlightOption(option: NgxSelectOption): SafeHtml {\r\n        if (this.inputElRef) {\r\n            return option.renderText(this.sanitizer, this.inputElRef.nativeElement.value);\r\n        }\r\n        return option.renderText(this.sanitizer, '');\r\n    }\r\n\r\n    /** @internal */\r\n    public optionSelect(option: NgxSelectOption, event: Event = null): void {\r\n        if (event) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        if (option && !option.disabled) {\r\n            this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).concat([option]));\r\n            this.select.emit(option.value);\r\n            this.optionsClose(/*true*/);\r\n            this.onTouched();\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public optionRemove(option: NgxSelectOption, event: Event): void {\r\n        if (!this.disabled && option) {\r\n            event.stopPropagation();\r\n            this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).filter(o => o !== option));\r\n            this.remove.emit(option.value);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public isOptionActive(option: NgxSelectOption, element: HTMLElement) {\r\n        if (this.optionActive === option) {\r\n            this.ensureVisibleElement(element);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** @internal */\r\n    public optionActivate(navigated: INgxOptionNavigated): void {\r\n        if ((this.optionActive !== navigated.activeOption) &&\r\n            (!navigated.activeOption || !navigated.activeOption.disabled)) {\r\n            this.optionActive = navigated.activeOption;\r\n            this.navigated.emit(navigated);\r\n        }\r\n    }\r\n\r\n    private filterOptions(search: string, options: TSelectOption[], selectedOptions: NgxSelectOption[]): TSelectOption[] {\r\n        const regExp = new RegExp(escapeString(search), 'i'),\r\n            filterOption = (option: NgxSelectOption) => {\r\n                if (this.searchCallback) {\r\n                    return this.searchCallback(search, option);\r\n                }\r\n                return (!search || regExp.test(option.text)) && (!this.multiple || selectedOptions.indexOf(option) === -1);\r\n            };\r\n\r\n        return options.filter((option: TSelectOption) => {\r\n            if (option instanceof NgxSelectOption) {\r\n                return filterOption(<NgxSelectOption>option);\r\n            } else if (option instanceof NgxSelectOptGroup) {\r\n                const subOp = <NgxSelectOptGroup>option;\r\n                subOp.filter((subOption: NgxSelectOption) => filterOption(subOption));\r\n                return subOp.optionsFiltered.length;\r\n            }\r\n        });\r\n    }\r\n\r\n    private ensureVisibleElement(element: HTMLElement) {\r\n        if (this.choiceMenuElRef && this.cacheElementOffsetTop !== element.offsetTop) {\r\n            this.cacheElementOffsetTop = element.offsetTop;\r\n            const container: HTMLElement = this.choiceMenuElRef.nativeElement;\r\n            if (this.cacheElementOffsetTop < container.scrollTop) {\r\n                container.scrollTop = this.cacheElementOffsetTop;\r\n            } else if (this.cacheElementOffsetTop + element.offsetHeight > container.scrollTop + container.clientHeight) {\r\n                container.scrollTop = this.cacheElementOffsetTop + element.offsetHeight - container.clientHeight;\r\n            }\r\n        }\r\n    }\r\n\r\n    public optionsOpen(search: string = '') {\r\n        if (!this.disabled) {\r\n            this.optionsOpened = true;\r\n            this.subjSearchText.next(search);\r\n            if (!this.multiple && this.subjOptionsSelected.value.length) {\r\n                this.navigateOption(ENavigation.firstSelected);\r\n            } else {\r\n                this.navigateOption(ENavigation.first);\r\n            }\r\n            this.focusToInput();\r\n            this.open.emit();\r\n        }\r\n    }\r\n\r\n    public optionsClose(/*focusToHost: boolean = false*/) {\r\n        this.optionsOpened = false;\r\n        // if (focusToHost) {\r\n        //     const x = window.scrollX, y = window.scrollY;\r\n        //     this.mainElRef.nativeElement.focus();\r\n        //     window.scrollTo(x, y);\r\n        // }\r\n        this.close.emit();\r\n\r\n        if (this.autoClearSearch && this.multiple && this.inputElRef) {\r\n            this.inputElRef.nativeElement.value = null;\r\n        }\r\n    }\r\n\r\n    private buildOptions(data: any[]): Array<NgxSelectOption | NgxSelectOptGroup> {\r\n        const result: Array<NgxSelectOption | NgxSelectOptGroup> = [];\r\n        if (Array.isArray(data)) {\r\n            let option: NgxSelectOption;\r\n            data.forEach((item: any) => {\r\n                const isOptGroup = typeof item === 'object' && item !== null &&\r\n                    propertyExists(item, this.optGroupLabelField) && propertyExists(item, this.optGroupOptionsField) &&\r\n                    Array.isArray(item[this.optGroupOptionsField]);\r\n                if (isOptGroup) {\r\n                    const optGroup = new NgxSelectOptGroup(item[this.optGroupLabelField]);\r\n                    item[this.optGroupOptionsField].forEach((subOption: NgxSelectOption) => {\r\n                        if (option = this.buildOption(subOption, optGroup)) {\r\n                            optGroup.options.push(option);\r\n                        }\r\n                    });\r\n                    result.push(optGroup);\r\n                } else if (option = this.buildOption(item, null)) {\r\n                    result.push(option);\r\n                }\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private buildOption(data: any, parent: NgxSelectOptGroup): NgxSelectOption {\r\n        let value, text, disabled;\r\n        if (typeof data === 'string' || typeof data === 'number') {\r\n            value = text = data;\r\n            disabled = false;\r\n        } else if (typeof data === 'object' && data !== null &&\r\n            (propertyExists(data, this.optionValueField) || propertyExists(data, this.optionTextField))) {\r\n            value = propertyExists(data, this.optionValueField) ? data[this.optionValueField] : data[this.optionTextField];\r\n            text = propertyExists(data, this.optionTextField) ? data[this.optionTextField] : data[this.optionValueField];\r\n            disabled = propertyExists(data, 'disabled') ? data['disabled'] : false;\r\n        } else {\r\n            return null;\r\n        }\r\n        return new NgxSelectOption(value, text, disabled, data, parent);\r\n    }\r\n\r\n    //////////// interface ControlValueAccessor ////////////\r\n    public onChange = (v: any) => v;\r\n\r\n    public onTouched: () => void = () => null;\r\n\r\n    public writeValue(obj: any): void {\r\n        this.subjExternalValue.next(obj);\r\n    }\r\n\r\n    public registerOnChange(fn: (_: any) => {}): void {\r\n        this.onChange = fn;\r\n        this.subjRegisterOnChange.next();\r\n    }\r\n\r\n    public registerOnTouched(fn: () => {}): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    public setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n}\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NGX_SELECT_OPTIONS, NgxSelectComponent} from './ngx-select.component';\r\nimport {NgxSelectOptionDirective, NgxSelectOptionNotFoundDirective, NgxSelectOptionSelectedDirective} from './ngx-templates.directive';\r\nimport {INgxSelectOptions} from './ngx-select.interfaces';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    declarations: [NgxSelectComponent,\r\n        NgxSelectOptionDirective, NgxSelectOptionSelectedDirective, NgxSelectOptionNotFoundDirective\r\n    ],\r\n    exports: [NgxSelectComponent,\r\n        NgxSelectOptionDirective, NgxSelectOptionSelectedDirective, NgxSelectOptionNotFoundDirective\r\n    ]\r\n})\r\nexport class NgxSelectModule {\r\n    static forRoot(options: INgxSelectOptions): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxSelectModule,\r\n            providers: [{provide: NGX_SELECT_OPTIONS, useValue: options}]\r\n        };\r\n    }\r\n}\r\n"],"names":["Directive","TemplateRef","escapeString","InjectionToken","EventEmitter","BehaviorSubject","Subject","map","merge","combineLatest","distinctUntilChanged","share","flatMap","from","of","empty","toArray","filter","tap","Component","NG_VALUE_ACCESSOR","forwardRef","IterableDiffers","DomSanitizer","ChangeDetectorRef","Inject","Optional","Input","Output","ViewChild","ContentChild","HostListener","NgModule","CommonModule"],"mappings":"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"}
