{"version":3,"sources":["ng://ngx-select-ex/ngx-select/ngx-select.classes.ts","ng://ngx-select-ex/ngx-select/ngx-templates.directive.ts","ng://ngx-select-ex/ngx-select/ngx-select.component.ts","ng://ngx-select-ex/ngx-select/ngx-select.module.ts"],"names":["escapeString","escapeStringNs","NgxSelectOption","value","text","disabled","data","_parent","this","prototype","renderText","sanitizer","highlightText","cacheHighlightText","cacheRenderedText","bypassSecurityTrustHtml","replace","RegExp","NgxSelectOptGroup","label","options","filter","callbackFn","optionsFiltered","option","NgxSelectOptionDirective","template","Directive","args","selector","TemplateRef","NgxSelectOptionSelectedDirective","NgxSelectOptionNotFoundDirective","_","lodashNs","NGX_SELECT_OPTIONS","InjectionToken","first","previous","next","last","firstSelected","firstIfOptionActiveInvisible","propertyExists","obj","propertyName","NgxSelectComponent","iterableDiffers","cd","defaultOptions","cacheExternalValue","_this","EventEmitter","BehaviorSubject","Subject","v","Object","assign","itemsDiffer","find","create","defaultValueDiffer","typed","subscribe","subjSearchText","subjOptionsSelected","selectionChanges","emit","subjActualValue","subjExternalValue","pipe","map","concat","merge","o","combineLatest","subjDefaultValue","eVal","dVal","newVal","isEqual","length","distinctUntilChanged","x","y","share","subjRegisterOnChange","actualValue","multiple","onChange","subjOptions","flatMap","from","of","empty","toArray","optionsFlat","indexOf","selectedOptions","search","filterOptions","cacheOptionsFilteredFlat","navigateOption","ENavigation","optionsFilteredFlat","flatOptions","autoSelectSingleOption","setFormControlSize","otherClassNames","useFormControl","formControlExtraClasses","form-control-sm input-sm","size","form-control-lg input-lg","setBtnSize","btn-sm","btn-lg","mainClicked","event","clickedSelectComponent","isFocused","focus","documentClick","optionsOpened","optionsClose","detectChanges","blur","tap","navigation","newActiveIdx","navigated","index","activeOption","filteredOptionList","optionActive","idxOfOptionActive","newNavigated","optionActivate","ngDoCheck","diff","items","buildOptions","defVal","defaultValue","ngAfterContentChecked","_focusToInput","checkInputVisibility","inputElRef","nativeElement","document","activeElement","canClearNotMultiple","allowClear","focusToInput","inputKeyDown","keysForOpenedState","keyCodeToOptionsSelect","keyCodeToNavigateFirst","keyCodeToNavigatePrevious","keyCodeToNavigateNext","keyCodeToNavigateLast","keysForClosedState","keyCodeToOptionsOpen","keyCodeToRemoveSelected","code","preventDefault","stopPropagation","optionSelect","optionsOpen","optionRemove","mainKeyUp","keyCodeToOptionsClose","trackByOption","noAutoComplete","inputKeyUp","doInputText","inputClick","sanitize","html","highlightOption","select","onTouched","remove","isOptionActive","element","ensureVisibleElement","regExp","filterOption","searchCallback","test","subOp","subOption","choiceMenuElRef","cacheElementOffsetTop","offsetTop","container","scrollTop","offsetHeight","clientHeight","open","close","autoClearSearch","result","Array","isArray","option_1","forEach","item","optGroupLabelField","optGroupOptionsField","optGroup_1","buildOption","push","parent","optionValueField","optionTextField","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","Component","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","IterableDiffers","DomSanitizer","ChangeDetectorRef","Inject","type","Optional","Input","Output","ViewChild","ContentChild","read","HostListener","NgxSelectModule","forRoot","ngModule","useValue","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import {DomSanitizer, SafeHtml} from '@angular/platform-browser';\r\nimport * as escapeStringNs from 'escape-string-regexp';\r\nimport {INgxSelectOptGroup, INgxSelectOption, INgxSelectOptionBase, TNgxSelectOptionType} from './ngx-select.interfaces';\r\n\r\nconst escapeString = escapeStringNs;\r\n\r\nexport class NgxSelectOption implements INgxSelectOption, INgxSelectOptionBase {\r\n    readonly type: TNgxSelectOptionType = 'option';\r\n\r\n    constructor(public value: number | string,\r\n                public text: string,\r\n                public disabled: boolean,\r\n                public data: any,\r\n                private _parent: NgxSelectOptGroup = null) {\r\n    }\r\n\r\n    public get parent(): NgxSelectOptGroup {\r\n        return this._parent;\r\n    }\r\n\r\n    private cacheHighlightText: string;\r\n    private cacheRenderedText: SafeHtml = null;\r\n\r\n    public renderText(sanitizer: DomSanitizer, highlightText: string): SafeHtml {\r\n        if (this.cacheHighlightText !== highlightText || this.cacheRenderedText === null) {\r\n            this.cacheHighlightText = highlightText;\r\n            if (this.cacheHighlightText) {\r\n                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml((this.text + '').replace(\r\n                    new RegExp(escapeString(this.cacheHighlightText), 'gi'), '<strong>$&</strong>'\r\n                ));\r\n            } else {\r\n                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml(this.text);\r\n            }\r\n        }\r\n        return this.cacheRenderedText;\r\n    }\r\n}\r\n\r\nexport class NgxSelectOptGroup implements INgxSelectOptGroup, INgxSelectOptionBase {\r\n    readonly type: TNgxSelectOptionType = 'optgroup';\r\n\r\n    public optionsFiltered: NgxSelectOption[];\r\n\r\n    constructor(public label: string,\r\n                public options: NgxSelectOption[] = []) {\r\n        this.filter(() => true);\r\n    }\r\n\r\n    public filter(callbackFn: (value: NgxSelectOption) => any): void {\r\n        this.optionsFiltered = this.options.filter((option: NgxSelectOption) => callbackFn(option));\r\n    }\r\n}\r\n\r\nexport type TSelectOption = NgxSelectOptGroup | NgxSelectOption;\r\n","import {Directive, TemplateRef} from '@angular/core';\r\n\r\n@Directive({selector: '[ngx-select-option]'})\r\nexport class NgxSelectOptionDirective {\r\n    constructor(public template: TemplateRef<any>) {\r\n    }\r\n}\r\n\r\n@Directive({selector: '[ngx-select-option-selected]'})\r\nexport class NgxSelectOptionSelectedDirective {\r\n    constructor(public template: TemplateRef<any>) {\r\n    }\r\n}\r\n\r\n@Directive({selector: '[ngx-select-option-not-found]'})\r\nexport class NgxSelectOptionNotFoundDirective {\r\n    constructor(public template: TemplateRef<any>) {\r\n    }\r\n}\r\n","import {\r\n    AfterContentChecked, DoCheck, Input, Output, ViewChild,\r\n    Component, ElementRef, EventEmitter, forwardRef, HostListener, IterableDiffer, IterableDiffers, ChangeDetectorRef, ContentChild,\r\n    TemplateRef, Optional, Inject, InjectionToken\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\r\nimport {Subject, Observable, BehaviorSubject, of, empty, from} from 'rxjs';\r\nimport {map, merge, combineLatest, distinctUntilChanged, share, tap, flatMap, filter, toArray} from 'rxjs/operators';\r\n\r\nimport * as lodashNs from 'lodash';\r\nimport * as escapeStringNs from 'escape-string-regexp';\r\nimport {NgxSelectOptGroup, NgxSelectOption, TSelectOption} from './ngx-select.classes';\r\nimport {NgxSelectOptionDirective, NgxSelectOptionNotFoundDirective, NgxSelectOptionSelectedDirective} from './ngx-templates.directive';\r\nimport {INgxOptionNavigated, INgxSelectOption, INgxSelectOptions} from './ngx-select.interfaces';\r\n\r\nconst _ = lodashNs;\r\nconst escapeString = escapeStringNs;\r\n\r\nexport const NGX_SELECT_OPTIONS = new InjectionToken<any>('NGX_SELECT_OPTIONS');\r\n\r\nexport interface INgxSelectComponentMouseEvent extends MouseEvent {\r\n    clickedSelectComponent?: NgxSelectComponent;\r\n}\r\n\r\nenum ENavigation {\r\n    first, previous, next, last,\r\n    firstSelected, firstIfOptionActiveInvisible\r\n}\r\n\r\nfunction propertyExists(obj: Object, propertyName: string) {\r\n    return propertyName in obj;\r\n}\r\n\r\n@Component({\r\n    selector: 'ngx-select',\r\n    templateUrl: './ngx-select.component.html',\r\n    styleUrls: ['./ngx-select.component.scss'],\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => NgxSelectComponent),\r\n            multi: true\r\n        }\r\n    ]\r\n})\r\nexport class NgxSelectComponent implements INgxSelectOptions, ControlValueAccessor, DoCheck, AfterContentChecked {\r\n    @Input() public items: any[];\r\n    @Input() public optionValueField = 'id';\r\n    @Input() public optionTextField = 'text';\r\n    @Input() public optGroupLabelField = 'label';\r\n    @Input() public optGroupOptionsField = 'options';\r\n    @Input() public multiple = false;\r\n    @Input() public allowClear = false;\r\n    @Input() public placeholder = '';\r\n    @Input() public noAutoComplete = false;\r\n    @Input() public disabled = false;\r\n    @Input() public defaultValue: any[] = [];\r\n    @Input() public autoSelectSingleOption = false;\r\n    @Input() public autoClearSearch = false;\r\n    @Input() public noResultsFound = 'No results found';\r\n    @Input() public size: 'small' | 'default' | 'large' = 'default';\r\n    @Input() public searchCallback: (search: string, item: INgxSelectOption) => boolean;\r\n    public keyCodeToRemoveSelected = 'Delete';\r\n    public keyCodeToOptionsOpen = 'Enter';\r\n    public keyCodeToOptionsClose = 'Escape';\r\n    public keyCodeToOptionsSelect = 'Enter';\r\n    public keyCodeToNavigateFirst = 'ArrowLeft';\r\n    public keyCodeToNavigatePrevious = 'ArrowUp';\r\n    public keyCodeToNavigateNext = 'ArrowDown';\r\n    public keyCodeToNavigateLast = 'ArrowRight';\r\n\r\n    @Output() public typed = new EventEmitter<string>();\r\n    @Output() public focus = new EventEmitter<void>();\r\n    @Output() public blur = new EventEmitter<void>();\r\n    @Output() public open = new EventEmitter<void>();\r\n    @Output() public close = new EventEmitter<void>();\r\n    @Output() public select = new EventEmitter<any>();\r\n    @Output() public remove = new EventEmitter<any>();\r\n    @Output() public navigated = new EventEmitter<INgxOptionNavigated>();\r\n    @Output() public selectionChanges = new EventEmitter<INgxSelectOption[]>();\r\n\r\n    @ViewChild('main') protected mainElRef: ElementRef;\r\n    @ViewChild('input') protected inputElRef: ElementRef;\r\n    @ViewChild('choiceMenu') protected choiceMenuElRef: ElementRef;\r\n\r\n    @ContentChild(NgxSelectOptionDirective, {read: TemplateRef}) templateOption: NgxSelectOptionDirective;\r\n    @ContentChild(NgxSelectOptionSelectedDirective, {read: TemplateRef}) templateSelectedOption: NgxSelectOptionSelectedDirective;\r\n    @ContentChild(NgxSelectOptionNotFoundDirective, {read: TemplateRef}) templateOptionNotFound: NgxSelectOptionNotFoundDirective;\r\n\r\n    public optionsOpened = false;\r\n    public optionsFiltered: TSelectOption[];\r\n\r\n    private optionActive: NgxSelectOption;\r\n    private itemsDiffer: IterableDiffer<any>;\r\n    private defaultValueDiffer: IterableDiffer<any[]>;\r\n    private actualValue: any[] = [];\r\n\r\n    public subjOptions = new BehaviorSubject<TSelectOption[]>([]);\r\n    private subjSearchText = new BehaviorSubject<string>('');\r\n\r\n    private subjOptionsSelected = new BehaviorSubject<NgxSelectOption[]>([]);\r\n    private subjExternalValue = new BehaviorSubject<any[]>([]);\r\n    private subjDefaultValue = new BehaviorSubject<any[]>([]);\r\n    private subjRegisterOnChange = new Subject();\r\n\r\n    private cacheOptionsFilteredFlat: NgxSelectOption[];\r\n    private cacheElementOffsetTop: number;\r\n\r\n    private _focusToInput = false;\r\n    public isFocused = false;\r\n\r\n    constructor(iterableDiffers: IterableDiffers, private sanitizer: DomSanitizer, private cd: ChangeDetectorRef,\r\n                @Inject(NGX_SELECT_OPTIONS) @Optional() defaultOptions: INgxSelectOptions) {\r\n        Object.assign(this, defaultOptions);\r\n\r\n        // differs\r\n        this.itemsDiffer = iterableDiffers.find([]).create<any>(null);\r\n        this.defaultValueDiffer = iterableDiffers.find([]).create<any>(null);\r\n\r\n        // observers\r\n        this.typed.subscribe((text: string) => this.subjSearchText.next(text));\r\n        this.subjOptionsSelected.subscribe((options: NgxSelectOption[]) => this.selectionChanges.emit(options));\r\n        let cacheExternalValue: any[];\r\n        const subjActualValue = this.subjExternalValue\r\n            .pipe(\r\n                map((v: any[]) => cacheExternalValue = v === null ? [] : [].concat(v)),\r\n                merge(\r\n                    this.subjOptionsSelected\r\n                    .pipe(\r\n                        map((options: NgxSelectOption[]) =>\r\n                            options.map((o: NgxSelectOption) => o.value)\r\n                        )\r\n                    )\r\n                ),\r\n                combineLatest(this.subjDefaultValue, (eVal: any[], dVal: any[]) => {\r\n                const newVal = _.isEqual(eVal, dVal) ? [] : eVal;\r\n                return newVal.length ? newVal : dVal;\r\n                }),\r\n                distinctUntilChanged((x, y) => _.isEqual(x, y)),\r\n                share()\r\n            );\r\n\r\n        subjActualValue\r\n            .pipe(\r\n                combineLatest(this.subjRegisterOnChange, (actualValue: any[]) => actualValue)\r\n            )\r\n            .subscribe((actualValue: any[]) => {\r\n                this.actualValue = actualValue;\r\n                if (!_.isEqual(actualValue, cacheExternalValue)) {\r\n                    cacheExternalValue = actualValue;\r\n                    if (this.multiple) {\r\n                        this.onChange(actualValue);\r\n                    } else {\r\n                        this.onChange(actualValue.length ? actualValue[0] : null);\r\n                    }\r\n                }\r\n            });\r\n\r\n        this.subjOptions\r\n            .pipe(\r\n                flatMap((options: TSelectOption[]) => from(options)\r\n                .pipe(flatMap((option: TSelectOption) => option instanceof NgxSelectOption\r\n                    ? of(option)\r\n                    : (option instanceof NgxSelectOptGroup ? from(option.options) : empty())\r\n                ),\r\n                toArray()\r\n                )\r\n            ))\r\n            .pipe(\r\n                combineLatest(subjActualValue, (optionsFlat: NgxSelectOption[], actualValue: any[]) => {\r\n                    from(optionsFlat)\r\n                    .pipe(\r\n                            filter((option: NgxSelectOption) => actualValue.indexOf(option.value) !== -1),\r\n                            toArray(),\r\n                            filter((options: NgxSelectOption[]) => !_.isEqual(options, this.subjOptionsSelected.value))\r\n                    )\r\n                        .subscribe((options: NgxSelectOption[]) => this.subjOptionsSelected.next(options));\r\n                })\r\n            )\r\n            .subscribe();\r\n\r\n        this.subjOptions\r\n            .pipe(\r\n                combineLatest(this.subjOptionsSelected, this.subjSearchText,\r\n                    (options: TSelectOption[], selectedOptions: NgxSelectOption[], search: string) => {\r\n                        this.optionsFiltered = this.filterOptions(search, options, selectedOptions);\r\n                        this.cacheOptionsFilteredFlat = null;\r\n                        this.navigateOption(ENavigation.firstIfOptionActiveInvisible);\r\n                        return selectedOptions;\r\n                    }\r\n                ),\r\n                flatMap((selectedOptions: NgxSelectOption[]) => {\r\n                    return this.optionsFilteredFlat().pipe(filter((flatOptions: NgxSelectOption[]) =>\r\n                        this.autoSelectSingleOption && flatOptions.length === 1 && !selectedOptions.length));\r\n                })\r\n                )\r\n            .subscribe((flatOptions: NgxSelectOption[]) => this.subjOptionsSelected.next(flatOptions));\r\n    }\r\n\r\n    public setFormControlSize(otherClassNames: Object = {}, useFormControl: boolean = true) {\r\n        const formControlExtraClasses = useFormControl ? {\r\n            'form-control-sm input-sm': this.size === 'small',\r\n            'form-control-lg input-lg': this.size === 'large'\r\n        } : {};\r\n        return Object.assign(formControlExtraClasses, otherClassNames);\r\n    }\r\n\r\n    public setBtnSize() {\r\n        return {'btn-sm': this.size === 'small', 'btn-lg': this.size === 'large'};\r\n    }\r\n\r\n    public get optionsSelected(): NgxSelectOption[] {\r\n        return this.subjOptionsSelected.value;\r\n    }\r\n\r\n    public mainClicked(event: INgxSelectComponentMouseEvent) {\r\n        event.clickedSelectComponent = this;\r\n        if (!this.isFocused) {\r\n            this.isFocused = true;\r\n            this.focus.emit();\r\n        }\r\n    }\r\n\r\n    @HostListener('document:focusin', ['$event'])\r\n    @HostListener('document:click', ['$event'])\r\n    public documentClick(event: INgxSelectComponentMouseEvent) {\r\n        if (event.clickedSelectComponent !== this) {\r\n            if (this.optionsOpened) {\r\n                this.optionsClose();\r\n                this.cd.detectChanges(); // fix error because of delay between different events\r\n            }\r\n            if (this.isFocused) {\r\n                this.isFocused = false;\r\n                this.blur.emit();\r\n            }\r\n        }\r\n    }\r\n\r\n    private optionsFilteredFlat(): Observable<NgxSelectOption[]> {\r\n        if (this.cacheOptionsFilteredFlat) {\r\n            return of(this.cacheOptionsFilteredFlat);\r\n        }\r\n\r\n        return from(this.optionsFiltered)\r\n            .pipe(flatMap<TSelectOption, NgxSelectOption>((option: TSelectOption) =>\r\n                option instanceof NgxSelectOption ? of(option) :\r\n                    (option instanceof NgxSelectOptGroup ? from(option.optionsFiltered) : empty())\r\n                ),\r\n                filter((optionsFilteredFlat: NgxSelectOption) => !optionsFilteredFlat.disabled),\r\n                toArray(),\r\n                tap((optionsFilteredFlat: NgxSelectOption[]) => this.cacheOptionsFilteredFlat = optionsFilteredFlat)\r\n            );\r\n    }\r\n\r\n    private navigateOption(navigation: ENavigation) {\r\n        this.optionsFilteredFlat()\r\n            .pipe(map<NgxSelectOption[], INgxOptionNavigated>((options: NgxSelectOption[]) => {\r\n                const navigated: INgxOptionNavigated = {index: -1, activeOption: null, filteredOptionList: options};\r\n                let newActiveIdx;\r\n                switch (navigation) {\r\n                    case ENavigation.first:\r\n                        navigated.index = 0;\r\n                        break;\r\n                    case ENavigation.previous:\r\n                        newActiveIdx = options.indexOf(this.optionActive) - 1;\r\n                        navigated.index = newActiveIdx >= 0 ? newActiveIdx : options.length - 1;\r\n                        break;\r\n                    case ENavigation.next:\r\n                        newActiveIdx = options.indexOf(this.optionActive) + 1;\r\n                        navigated.index = newActiveIdx < options.length ? newActiveIdx : 0;\r\n                        break;\r\n                    case ENavigation.last:\r\n                        navigated.index = options.length - 1;\r\n                        break;\r\n                    case ENavigation.firstSelected:\r\n                        if (this.subjOptionsSelected.value.length) {\r\n                            navigated.index = options.indexOf(this.subjOptionsSelected.value[0]);\r\n                        }\r\n                        break;\r\n                    case ENavigation.firstIfOptionActiveInvisible:\r\n                        const idxOfOptionActive = options.indexOf(this.optionActive);\r\n                        navigated.index = idxOfOptionActive > 0 ? idxOfOptionActive : 0;\r\n                        break;\r\n                }\r\n                navigated.activeOption = options[navigated.index];\r\n                return navigated;\r\n            }))\r\n            .subscribe((newNavigated: INgxOptionNavigated) => this.optionActivate(newNavigated));\r\n    }\r\n\r\n    public ngDoCheck(): void {\r\n        if (this.itemsDiffer.diff(this.items)) {\r\n            this.subjOptions.next(this.buildOptions(this.items));\r\n        }\r\n\r\n        const defVal = this.defaultValue ? [].concat(this.defaultValue) : [];\r\n        if (this.defaultValueDiffer.diff(defVal)) {\r\n            this.subjDefaultValue.next(defVal);\r\n        }\r\n    }\r\n\r\n    public ngAfterContentChecked(): void {\r\n        if (this._focusToInput && this.checkInputVisibility() && this.inputElRef &&\r\n            this.inputElRef.nativeElement !== document.activeElement) {\r\n            this._focusToInput = false;\r\n            this.inputElRef.nativeElement.focus();\r\n        }\r\n    }\r\n\r\n    public canClearNotMultiple(): boolean {\r\n        return this.allowClear && !!this.subjOptionsSelected.value.length &&\r\n            (!this.subjDefaultValue.value.length || this.subjDefaultValue.value[0] !== this.actualValue[0]);\r\n    }\r\n\r\n    public focusToInput(): void {\r\n        this._focusToInput = true;\r\n    }\r\n\r\n    public inputKeyDown(event: KeyboardEvent) {\r\n        const keysForOpenedState = [\r\n            this.keyCodeToOptionsSelect,\r\n            this.keyCodeToNavigateFirst,\r\n            this.keyCodeToNavigatePrevious,\r\n            this.keyCodeToNavigateNext,\r\n            this.keyCodeToNavigateLast,\r\n        ];\r\n        const keysForClosedState = [this.keyCodeToOptionsOpen, this.keyCodeToRemoveSelected];\r\n\r\n        if (this.optionsOpened && keysForOpenedState.indexOf(event.code) !== -1) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            switch (event.code) {\r\n                case this.keyCodeToOptionsSelect:\r\n                    this.optionSelect(this.optionActive);\r\n                    this.navigateOption(ENavigation.next);\r\n                    break;\r\n                case this.keyCodeToNavigateFirst:\r\n                    this.navigateOption(ENavigation.first);\r\n                    break;\r\n                case this.keyCodeToNavigatePrevious:\r\n                    this.navigateOption(ENavigation.previous);\r\n                    break;\r\n                case this.keyCodeToNavigateLast:\r\n                    this.navigateOption(ENavigation.last);\r\n                    break;\r\n                case this.keyCodeToNavigateNext:\r\n                    this.navigateOption(ENavigation.next);\r\n                    break;\r\n            }\r\n        } else if (!this.optionsOpened && keysForClosedState.indexOf(event.code) !== -1) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            switch (event.code) {\r\n                case this.keyCodeToOptionsOpen:\r\n                    this.optionsOpen();\r\n                    break;\r\n                case this.keyCodeToRemoveSelected:\r\n                    this.optionRemove(this.subjOptionsSelected.value[this.subjOptionsSelected.value.length - 1], event);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public mainKeyUp(event: KeyboardEvent): void {\r\n        if (event.code === this.keyCodeToOptionsClose) {\r\n            this.optionsClose(/*true*/);\r\n        }\r\n    }\r\n\r\n    public trackByOption(index: number, option: TSelectOption) {\r\n        return option instanceof NgxSelectOption ? option.value :\r\n            (option instanceof NgxSelectOptGroup ? option.label : option);\r\n    }\r\n\r\n    public checkInputVisibility(): boolean {\r\n        return (this.multiple === true) || (this.optionsOpened && !this.noAutoComplete);\r\n    }\r\n\r\n    /** @internal */\r\n    public inputKeyUp(value: string = '') {\r\n        if (!this.optionsOpened && value) {\r\n            this.optionsOpen(value);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public doInputText(value: string) {\r\n        if (this.optionsOpened) {\r\n            this.typed.emit(value);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public inputClick(value: string = '') {\r\n        if (!this.optionsOpened) {\r\n            this.optionsOpen(value);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public sanitize(html: string): SafeHtml {\r\n        return html ? this.sanitizer.bypassSecurityTrustHtml(html) : null;\r\n    }\r\n\r\n    /** @internal */\r\n    public highlightOption(option: NgxSelectOption): SafeHtml {\r\n        if (this.inputElRef) {\r\n            return option.renderText(this.sanitizer, this.inputElRef.nativeElement.value);\r\n        }\r\n        return option.renderText(this.sanitizer, '');\r\n    }\r\n\r\n    /** @internal */\r\n    public optionSelect(option: NgxSelectOption, event: Event = null): void {\r\n        if (event) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        if (option && !option.disabled) {\r\n            this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).concat([option]));\r\n            this.select.emit(option.value);\r\n            this.optionsClose(/*true*/);\r\n            this.onTouched();\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public optionRemove(option: NgxSelectOption, event: Event): void {\r\n        if (!this.disabled && option) {\r\n            event.stopPropagation();\r\n            this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).filter(o => o !== option));\r\n            this.remove.emit(option.value);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public isOptionActive(option: NgxSelectOption, element: HTMLElement) {\r\n        if (this.optionActive === option) {\r\n            this.ensureVisibleElement(element);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** @internal */\r\n    public optionActivate(navigated: INgxOptionNavigated): void {\r\n        if ((this.optionActive !== navigated.activeOption) &&\r\n            (!navigated.activeOption || !navigated.activeOption.disabled)) {\r\n            this.optionActive = navigated.activeOption;\r\n            this.navigated.emit(navigated);\r\n        }\r\n    }\r\n\r\n    private filterOptions(search: string, options: TSelectOption[], selectedOptions: NgxSelectOption[]): TSelectOption[] {\r\n        const regExp = new RegExp(escapeString(search), 'i'),\r\n            filterOption = (option: NgxSelectOption) => {\r\n                if (this.searchCallback) {\r\n                    return this.searchCallback(search, option);\r\n                }\r\n                return (!search || regExp.test(option.text)) && (!this.multiple || selectedOptions.indexOf(option) === -1);\r\n            };\r\n\r\n        return options.filter((option: TSelectOption) => {\r\n            if (option instanceof NgxSelectOption) {\r\n                return filterOption(<NgxSelectOption>option);\r\n            } else if (option instanceof NgxSelectOptGroup) {\r\n                const subOp = <NgxSelectOptGroup>option;\r\n                subOp.filter((subOption: NgxSelectOption) => filterOption(subOption));\r\n                return subOp.optionsFiltered.length;\r\n            }\r\n        });\r\n    }\r\n\r\n    private ensureVisibleElement(element: HTMLElement) {\r\n        if (this.choiceMenuElRef && this.cacheElementOffsetTop !== element.offsetTop) {\r\n            this.cacheElementOffsetTop = element.offsetTop;\r\n            const container: HTMLElement = this.choiceMenuElRef.nativeElement;\r\n            if (this.cacheElementOffsetTop < container.scrollTop) {\r\n                container.scrollTop = this.cacheElementOffsetTop;\r\n            } else if (this.cacheElementOffsetTop + element.offsetHeight > container.scrollTop + container.clientHeight) {\r\n                container.scrollTop = this.cacheElementOffsetTop + element.offsetHeight - container.clientHeight;\r\n            }\r\n        }\r\n    }\r\n\r\n    public optionsOpen(search: string = '') {\r\n        if (!this.disabled) {\r\n            this.optionsOpened = true;\r\n            this.subjSearchText.next(search);\r\n            if (!this.multiple && this.subjOptionsSelected.value.length) {\r\n                this.navigateOption(ENavigation.firstSelected);\r\n            } else {\r\n                this.navigateOption(ENavigation.first);\r\n            }\r\n            this.focusToInput();\r\n            this.open.emit();\r\n        }\r\n    }\r\n\r\n    public optionsClose(/*focusToHost: boolean = false*/) {\r\n        this.optionsOpened = false;\r\n        // if (focusToHost) {\r\n        //     const x = window.scrollX, y = window.scrollY;\r\n        //     this.mainElRef.nativeElement.focus();\r\n        //     window.scrollTo(x, y);\r\n        // }\r\n        this.close.emit();\r\n\r\n        if (this.autoClearSearch && this.multiple && this.inputElRef) {\r\n            this.inputElRef.nativeElement.value = null;\r\n        }\r\n    }\r\n\r\n    private buildOptions(data: any[]): Array<NgxSelectOption | NgxSelectOptGroup> {\r\n        const result: Array<NgxSelectOption | NgxSelectOptGroup> = [];\r\n        if (Array.isArray(data)) {\r\n            let option: NgxSelectOption;\r\n            data.forEach((item: any) => {\r\n                const isOptGroup = typeof item === 'object' && item !== null &&\r\n                    propertyExists(item, this.optGroupLabelField) && propertyExists(item, this.optGroupOptionsField) &&\r\n                    Array.isArray(item[this.optGroupOptionsField]);\r\n                if (isOptGroup) {\r\n                    const optGroup = new NgxSelectOptGroup(item[this.optGroupLabelField]);\r\n                    item[this.optGroupOptionsField].forEach((subOption: NgxSelectOption) => {\r\n                        if (option = this.buildOption(subOption, optGroup)) {\r\n                            optGroup.options.push(option);\r\n                        }\r\n                    });\r\n                    result.push(optGroup);\r\n                } else if (option = this.buildOption(item, null)) {\r\n                    result.push(option);\r\n                }\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private buildOption(data: any, parent: NgxSelectOptGroup): NgxSelectOption {\r\n        let value, text, disabled;\r\n        if (typeof data === 'string' || typeof data === 'number') {\r\n            value = text = data;\r\n            disabled = false;\r\n        } else if (typeof data === 'object' && data !== null &&\r\n            (propertyExists(data, this.optionValueField) || propertyExists(data, this.optionTextField))) {\r\n            value = propertyExists(data, this.optionValueField) ? data[this.optionValueField] : data[this.optionTextField];\r\n            text = propertyExists(data, this.optionTextField) ? data[this.optionTextField] : data[this.optionValueField];\r\n            disabled = propertyExists(data, 'disabled') ? data['disabled'] : false;\r\n        } else {\r\n            return null;\r\n        }\r\n        return new NgxSelectOption(value, text, disabled, data, parent);\r\n    }\r\n\r\n    //////////// interface ControlValueAccessor ////////////\r\n    public onChange = (v: any) => v;\r\n\r\n    public onTouched: () => void = () => null;\r\n\r\n    public writeValue(obj: any): void {\r\n        this.subjExternalValue.next(obj);\r\n    }\r\n\r\n    public registerOnChange(fn: (_: any) => {}): void {\r\n        this.onChange = fn;\r\n        this.subjRegisterOnChange.next();\r\n    }\r\n\r\n    public registerOnTouched(fn: () => {}): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    public setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n}\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NGX_SELECT_OPTIONS, NgxSelectComponent} from './ngx-select.component';\r\nimport {NgxSelectOptionDirective, NgxSelectOptionNotFoundDirective, NgxSelectOptionSelectedDirective} from './ngx-templates.directive';\r\nimport {INgxSelectOptions} from './ngx-select.interfaces';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    declarations: [NgxSelectComponent,\r\n        NgxSelectOptionDirective, NgxSelectOptionSelectedDirective, NgxSelectOptionNotFoundDirective\r\n    ],\r\n    exports: [NgxSelectComponent,\r\n        NgxSelectOptionDirective, NgxSelectOptionSelectedDirective, NgxSelectOptionNotFoundDirective\r\n    ]\r\n})\r\nexport class NgxSelectModule {\r\n    static forRoot(options: INgxSelectOptions): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxSelectModule,\r\n            providers: [{provide: NGX_SELECT_OPTIONS, useValue: options}]\r\n        };\r\n    }\r\n}\r\n"]}